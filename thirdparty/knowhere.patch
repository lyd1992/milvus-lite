diff --git a/CMakeLists.txt b/CMakeLists.txt
index bd495fcd..bb0b70e8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -97,7 +97,6 @@ find_package(nlohmann_json REQUIRED)
 find_package(glog REQUIRED)
 find_package(prometheus-cpp REQUIRED)
 find_package(fmt REQUIRED)
-find_package(opentelemetry-cpp REQUIRED)
 
 set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_OSX_DEPLOYMENT_TARGET
@@ -171,17 +170,6 @@ if(NOT WITH_LIGHT)
 endif()
 list(APPEND KNOWHERE_LINKER_LIBS fmt::fmt-header-only)
 list(APPEND KNOWHERE_LINKER_LIBS Folly::folly)
-if(NOT WITH_LIGHT)
-  list(APPEND KNOWHERE_LINKER_LIBS opentelemetry-cpp::opentelemetry_trace)
-  list(APPEND KNOWHERE_LINKER_LIBS
-       opentelemetry-cpp::opentelemetry_exporter_ostream_span)
-  list(APPEND KNOWHERE_LINKER_LIBS
-       opentelemetry-cpp::opentelemetry_exporter_jaeger_trace)
-  list(APPEND KNOWHERE_LINKER_LIBS
-       opentelemetry-cpp::opentelemetry_exporter_otlp_grpc)
-  list(APPEND KNOWHERE_LINKER_LIBS
-       opentelemetry-cpp::opentelemetry_exporter_otlp_http)
-endif()
 
 add_library(knowhere SHARED ${KNOWHERE_SRCS})
 add_dependencies(knowhere ${KNOWHERE_LINKER_LIBS})
diff --git a/cmake/libs/libfaiss.cmake b/cmake/libs/libfaiss.cmake
index 8b77c606..067b1f22 100644
--- a/cmake/libs/libfaiss.cmake
+++ b/cmake/libs/libfaiss.cmake
@@ -52,6 +52,12 @@ if(__AARCH64)
   target_link_libraries(knowhere_utils PUBLIC glog::glog)
 endif()
 
+if(__RISCV64)
+  set(UTILS_SRC src/simd/hook.cc src/simd/distances_ref.cc)
+  add_library(knowhere_utils STATIC ${UTILS_SRC})
+  target_link_libraries(knowhere_utils PUBLIC glog::glog)
+endif()
+
 # ToDo: Add distances_vsx.cc for powerpc64 SIMD acceleration
 if(__PPC64)
   set(UTILS_SRC src/simd/hook.cc src/simd/distances_ref.cc)
@@ -132,6 +138,28 @@ if(__AARCH64)
   target_compile_definitions(faiss PRIVATE FINTEGER=int)
 endif()
 
+if(__RISCV64)
+  knowhere_file_glob(GLOB FAISS_AVX_SRCS thirdparty/faiss/faiss/impl/*avx.cpp)
+
+  list(REMOVE_ITEM FAISS_SRCS ${FAISS_AVX_SRCS})
+  add_library(faiss STATIC ${FAISS_SRCS})
+
+  target_compile_options(
+    faiss
+    PRIVATE $<$<COMPILE_LANGUAGE:CXX>:
+            -Wno-sign-compare
+            -Wno-unused-variable
+            -Wno-reorder
+            -Wno-unused-local-typedefs
+            -Wno-unused-function
+            -Wno-strict-aliasing>)
+
+  add_dependencies(faiss knowhere_utils)
+  target_link_libraries(faiss PUBLIC OpenMP::OpenMP_CXX ${BLAS_LIBRARIES}
+                                     ${LAPACK_LIBRARIES} knowhere_utils)
+  target_compile_definitions(faiss PRIVATE FINTEGER=int)
+endif()
+
 if(__PPC64)
   knowhere_file_glob(GLOB FAISS_AVX_SRCS thirdparty/faiss/faiss/impl/*avx.cpp)
 
diff --git a/cmake/utils/platform_check.cmake b/cmake/utils/platform_check.cmake
index afc41d07..af8e92f6 100644
--- a/cmake/utils/platform_check.cmake
+++ b/cmake/utils/platform_check.cmake
@@ -4,11 +4,13 @@ macro(detect_target_arch)
   check_symbol_exists(__aarch64__ "" __AARCH64)
   check_symbol_exists(__x86_64__ "" __X86_64)
   check_symbol_exists(__powerpc64__ "" __PPC64)
+  check_symbol_exists(__riscv "" __RISCV64)
 
   if(NOT __AARCH64
      AND NOT __X86_64
-     AND NOT __PPC64)
-    message(FATAL "knowhere only support amd64, ppc64 and arm64 architecture.")
+     AND NOT __PPC64
+     AND NOT __RISCV64)
+    message(FATAL "knowhere only support amd64, ppc64, riscv64 and arm64 architecture.")
   endif()
 endmacro()
 
diff --git a/include/knowhere/comp/thread_pool.h b/include/knowhere/comp/thread_pool.h
index b39bde99..6fd699f0 100644
--- a/include/knowhere/comp/thread_pool.h
+++ b/include/knowhere/comp/thread_pool.h
@@ -223,7 +223,7 @@ class ThreadPool {
     static std::shared_ptr<ThreadPool>
     GetGlobalSearchThreadPool() {
         if (search_pool_ == nullptr) {
-            InitGlobalSearchThreadPool(std::thread::hardware_concurrency());
+            InitGlobalSearchThreadPool(4);
         }
         return search_pool_;
     }
diff --git a/include/knowhere/tracer.h b/include/knowhere/tracer.h
index 11d5681b..4065bb13 100644
--- a/include/knowhere/tracer.h
+++ b/include/knowhere/tracer.h
@@ -11,16 +11,42 @@
 
 #pragma once
 
+#include <any>
 #include <memory>
 #include <string>
 
 #include "knowhere/config.h"
+#ifndef MILVUS_LITE
 #include "opentelemetry/trace/provider.h"
+#endif
 
 #define TRACE_SERVICE_KNOWHERE "knowhere"
 
 namespace knowhere::tracer {
 
+#ifdef MILVUS_LITE
+
+namespace trace {
+class Span {
+ public:
+    void
+    End() {
+    }
+    void
+    SetAttribute(const char* a, std::any b) {
+    }
+};
+class Tracer {
+ public:
+    static int
+    WithActiveSpan(std::shared_ptr<Span>& span) noexcept {
+        return 0;
+    }
+};
+
+};  // namespace trace
+#endif
+
 struct TraceConfig {
     std::string exporter;
     float sampleFraction;
@@ -36,7 +62,10 @@ struct TraceContext {
     const uint8_t* spanID = nullptr;
     uint8_t traceFlags = 0;
 };
+
+#ifndef MILVUS_LITE
 namespace trace = opentelemetry::trace;
+#endif
 
 void
 initTelemetry(const TraceConfig& cfg);
diff --git a/src/common/tracer.cc b/src/common/tracer.cc
index 99daf00a..9864e62d 100644
--- a/src/common/tracer.cc
+++ b/src/common/tracer.cc
@@ -13,10 +13,13 @@
 
 #include <iomanip>
 #include <iostream>
+#include <memory>
 #include <sstream>
 #include <utility>
 
 #include "knowhere/log.h"
+
+#ifndef MILVUS_LITE
 #include "opentelemetry/exporters/jaeger/jaeger_exporter_factory.h"
 #include "opentelemetry/exporters/ostream/span_exporter_factory.h"
 #include "opentelemetry/exporters/otlp/otlp_grpc_exporter_factory.h"
@@ -29,9 +32,12 @@
 #include "opentelemetry/sdk/version/version.h"
 #include "opentelemetry/trace/span_context.h"
 #include "opentelemetry/trace/span_metadata.h"
+#endif
 
 namespace knowhere::tracer {
 
+#ifndef MILVUS_LITE
+
 namespace trace = opentelemetry::trace;
 namespace nostd = opentelemetry::nostd;
 
@@ -143,6 +149,65 @@ EmptySpanID(const TraceContext* ctx) {
     return isEmptyID(ctx->spanID, trace::SpanId::kSize);
 }
 
+tracer::TraceContext
+GetTraceCtxFromCfg(const BaseConfig* cfg) {
+    auto trace_id = cfg->trace_id.value();
+    auto span_id = cfg->span_id.value();
+    auto trace_flags = cfg->trace_flags.value();
+    return tracer::TraceContext{trace_id.data(), span_id.data(), (uint8_t)trace_flags};
+}
+#endif
+
+#ifdef MILVUS_LITE
+void
+initTelemetry(const TraceConfig& cfg) {
+}
+
+std::shared_ptr<trace::Tracer>
+GetTracer() {
+    return std::make_shared<trace::Tracer>();
+}
+
+std::shared_ptr<trace::Span>
+StartSpan(const std::string& name, TraceContext* parentCtx) {
+    return std::make_shared<trace::Span>();
+}
+
+thread_local std::shared_ptr<trace::Span> local_span;
+void
+SetRootSpan(std::shared_ptr<trace::Span> span) {
+}
+
+void
+CloseRootSpan() {
+}
+
+void
+AddEvent(const std::string& event_label) {
+}
+
+bool
+isEmptyID(const uint8_t* id, int length) {
+    if (id != nullptr) {
+        for (int i = 0; i < length; i++) {
+            if (id[i] != 0) {
+                return false;
+            }
+        }
+    }
+    return true;
+}
+
+bool
+EmptyTraceID(const TraceContext* ctx) {
+    return true;
+}
+
+bool
+EmptySpanID(const TraceContext* ctx) {
+    return true;
+}
+
 tracer::TraceContext
 GetTraceCtxFromCfg(const BaseConfig* cfg) {
     auto trace_id = cfg->trace_id.value();
@@ -151,4 +216,5 @@ GetTraceCtxFromCfg(const BaseConfig* cfg) {
     return tracer::TraceContext{trace_id.data(), span_id.data(), (uint8_t)trace_flags};
 }
 
+#endif
 }  // namespace knowhere::tracer
